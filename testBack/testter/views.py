
from rest_framework import viewsets, permissions, generics  # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç permissions
from .models import Event, Client

from .serializers import EventSerializer, ClientSerializer

from rest_framework.permissions import IsAuthenticated, AllowAny
from django.contrib.auth import logout
from rest_framework.response import Response
from rest_framework import status
from django.contrib.auth import authenticate, login
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import ensure_csrf_cookie
from django.contrib.auth.decorators import login_required
from rest_framework.views import APIView
from .permission import IsOwner
@ensure_csrf_cookie
def csrf_view(request):
    return JsonResponse({"detail": "CSRF cookie set"})



@require_POST
#@csrf_exempt
def login_api_view(request):
    from django.http import QueryDict
    data = request.POST or QueryDict(request.body)
    print(dict(request.headers))
    username = data.get("username")
    password = data.get("password")
    user = authenticate(request, username=username, password=password)
    if user is not None:
        login(request, user)
        return JsonResponse({"username": user.username})
    return JsonResponse({"detail": "Invalid credentials"}, status=401)


@require_POST
#@csrf_exempt  # (–∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –∑ CSRF, —è–∫—â–æ frontend –¥–æ–¥–∞—î X-CSRFToken)
def logout_api_view(request):
    logout(request)  # ‚Üê —Ü–µ –∑–Ω–∏—â—É—î —Å–µ—Å—ñ—é –≤ Django
    return JsonResponse({"detail": "Logged out"}, status=200)

class EventAPIList(generics.ListCreateAPIView):
    serializer_class = EventSerializer
    permission_classes = [IsAuthenticated, IsOwner]

    def get_queryset(self):
        return Event.objects.filter(owner=self.request.user).order_by('-id')

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)

class EventAPIDestroy(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = EventSerializer
    permission_classes = [IsAuthenticated, IsOwner]

    def get_queryset(self):
        return Event.objects.filter(owner=self.request.user)



class AboutUserView(APIView):
    # ‚úÖ –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î, —â–æ View –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π, DRF –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ 401 Unauthorized
    # –∑ JSON-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É ("Authentication credentials were not provided.").
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        # request.user –±—É–¥–µ –æ–±'—î–∫—Ç–æ–º User (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π)
        user_data = {
            'id': request.user.id,
            'username': request.user.username,
            'email': request.user.email,
            'first_name': request.user.first_name,
            'last_name': request.user.last_name,
            'is_superuser': request.user.is_superuser,
            'is_staff': request.user.is_staff,
        }
        # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DRF Response, —è–∫–∏–π –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î Content-Type: application/json
        return Response(user_data, status=status.HTTP_200_OK)


# --- –ù–û–í–ò–ô CLIENT VIEWSET ---
class ClientViewSet(viewsets.ModelViewSet):

    serializer_class = ClientSerializer
    permission_classes = [permissions.IsAuthenticated] # –ó–∞—Ö–∏—â–∞—î–º–æ –¥–æ—Å—Ç—É–ø

    def get_queryset(self):
        # ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏—Ç—å –ª–∏—à–µ —Å–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        return Client.objects.filter(owner=self.request.user).order_by('last_name')

    def perform_create(self, serializer):
        # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–ª–∞—Å–Ω–∏–∫–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        serializer.save(owner=self.request.user)


"""@login_required  # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
def about_user(request):
    user = request.user  # üîë –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print(f"USER = = = {user}")

    return JsonResponse({
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "is_superuser": user.is_superuser,
        "is_staff": user.is_staff,

    }, status=200)
"""


# class EventAPIUpdate(generics.RetrieveUpdateAPIView):
#     queryset = Event.objects.all()
#     serializer_class = EventSerializer
#     permission_classes = [IsAuthenticated]


